if(NOT MSVC)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-result")
endif()

if(ENABLE_CUDA)
  message(DEBUG "DataMgr CUDA_COMPILATION_ARCH: ${CUDA_COMPILATION_ARCH}")
  set(MAPD_DEFINITIONS "-DHAVE_CUDA")
  set(NVCC_BUILD_TYPE_ARGS)
  string(TOUPPER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_UPPERCASE)
  if(CMAKE_BUILD_TYPE_UPPERCASE MATCHES DEBUG)
    list(APPEND NVCC_BUILD_TYPE_ARGS -DTHRUST_DEBUG --debug)
    if (ENABLE_CUDA_KERNEL_DEBUG)
        list(APPEND NVCC_BUILD_TYPE_ARGS --device-debug)
    endif()
  else()
    list(APPEND NVCC_BUILD_TYPE_ARGS -O3)
  endif()
endif()

set(datamgr_source_files
    AbstractBuffer.cpp
    Allocators/CudaAllocator.cpp
    Allocators/ThrustAllocator.cpp
    Chunk/Chunk.cpp
    DataMgr.cpp
    Encoder.cpp
    StringNoneEncoder.cpp
    FileMgr/CachingFileMgr.cpp
    FileMgr/GlobalFileMgr.cpp
    FileMgr/FileMgr.cpp
    FileMgr/FileBuffer.cpp
    FileMgr/FileInfo.cpp
    ForeignStorage/AbstractTextFileDataWrapper.cpp
    ForeignStorage/ArrowForeignStorage.cpp
    ForeignStorage/CacheEvictionAlgorithms/LRUEvictionAlgorithm.cpp
    ForeignStorage/CsvDataWrapper.cpp
    ForeignStorage/CachingForeignStorageMgr.cpp
    ForeignStorage/DummyForeignStorage.cpp
    ForeignStorage/ForeignStorageInterface.cpp
    ForeignStorage/ForeignStorageBuffer.cpp
    ForeignStorage/ForeignStorageMgr.cpp
    ForeignStorage/ForeignStorageCache.cpp
    ForeignStorage/FsiChunkUtils.cpp
    ForeignStorage/FsiJsonUtils.cpp
    ForeignStorage/FileReader.cpp
    ForeignStorage/FileRegions.cpp
    ForeignStorage/TextFileBufferParser.cpp
    ForeignStorage/CsvFileBufferParser.cpp
    #BufferMgr/GpuCudaBufferMgr/GpuCudaBufferMgr.cpp
    #BufferMgr/GpuCudaBufferMgr/GpuCudaBuffer.cpp
    BufferMgr/GpuCudaBufferMgr/GpuHeteroBufferMgr.cpp
    #BufferMgr/CpuBufferMgr/CpuBufferMgr.cpp
    #BufferMgr/CpuBufferMgr/CpuBuffer.cpp
    BufferMgr/CpuBufferMgr/CpuHeteroBufferMgr.cpp
    BufferMgr/BufferMgr.cpp
    BufferMgr/Buffer.cpp
    BufferMgr/HeteroBufferMgr.cpp
    PersistentStorageMgr/MutableCachePersistentStorageMgr.cpp
    PersistentStorageMgr/PersistentStorageMgr.cpp
    ForeignStorage/ForeignTableRefresh.cpp
    ForeignStorage/AbstractFileStorageDataWrapper.cpp
    ForeignStorage/ForeignDataWrapperFactory.cpp
)

if("${MAPD_EDITION_LOWER}" STREQUAL "ee")
if(ENABLE_AWS_S3)
  list(APPEND datamgr_source_files ForeignStorage/ee/FileReaderS3.cpp)
  list(APPEND datamgr_source_files ForeignStorage/ee/S3Utils.cpp)
  list(APPEND datamgr_source_files ForeignStorage/ee/S3SelectClient.cpp)
  list(APPEND datamgr_source_files ForeignStorage/ee/S3SelectDataWrapper.cpp)
endif()
endif()

if(ENABLE_IMPORT_PARQUET)
  list(APPEND datamgr_source_files ForeignStorage/ParquetDataWrapper.cpp)
  list(APPEND datamgr_source_files ForeignStorage/ParquetShared.cpp)
  list(APPEND datamgr_source_files ForeignStorage/LazyParquetChunkLoader.cpp)
endif()

# On Linux, Arrow internally links symbols for its dependency libraries (such as the C++ AWS SDK)
# when it is built as a shared library. In this case, set a flag that would be used to determine
# how to handle AWS SDK initialization and shutdown.
function(set_arrow_has_private_aws_sdk)
  if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    foreach(LIB_PATH ${Arrow_LIBRARIES})
      get_filename_component(LIB_NAME ${LIB_PATH} NAME)
      if (${LIB_NAME} STREQUAL "${CMAKE_SHARED_LIBRARY_PREFIX}arrow${CMAKE_SHARED_LIBRARY_SUFFIX}")
        add_definitions("-DARROW_HAS_PRIVATE_AWS_SDK")
      endif()
    endforeach()
  endif()
endfunction()

if(ENABLE_AWS_S3)
  list(APPEND datamgr_source_files OmniSciAwsSdk.cpp)
  set_arrow_has_private_aws_sdk()
endif()

if(ENABLE_CUDA)
  add_library(DataMgr ${datamgr_source_files} ${CMAKE_CURRENT_BINARY_DIR}/GpuCudaHeteroBuffer.o)
  add_dependencies(DataMgr DataMgrCudaTargets)
else()
  add_library(DataMgr ${datamgr_source_files})
endif()

add_custom_command(
  DEPENDS BufferMgr/GpuCudaBufferMgr/GpuCudaHeteroBuffer.cu
  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/GpuCudaHeteroBuffer.o
  COMMAND nvcc
  ARGS
    -I ${CMAKE_SOURCE_DIR}
    ${MAPD_HOST_COMPILER_FLAG}
    -Xcompiler -fPIC
    -std=c++17
    -D_FORCE_INLINES
    ${MAPD_DEFINITIONS}
    ${CUDA_COMPILATION_ARCH}
    ${NVCC_BUILD_TYPE_ARGS}
    -c ${CMAKE_CURRENT_SOURCE_DIR}/BufferMgr/GpuCudaBufferMgr/GpuCudaHeteroBuffer.cu
  )

target_link_libraries(DataMgr CudaMgr $<$<BOOL:${ENABLE_FOLLY}>:${Folly_LIBRARIES}> Shared ${Boost_THREAD_LIBRARY} ${TBB_LIBS} ${CMAKE_DL_LIBS})

option(ENABLE_CRASH_CORRUPTION_TEST "Enable crash using SIGUSR2 during page deletion to faster and affirmative test/repro db corruption" OFF)
if(ENABLE_CRASH_CORRUPTION_TEST)
  add_definitions("-DENABLE_CRASH_CORRUPTION_TEST")
endif()

add_custom_target(DataMgrCudaTargets
  DEPENDS
    ${CMAKE_CURRENT_BINARY_DIR}/GpuCudaHeteroBuffer.o
  )
